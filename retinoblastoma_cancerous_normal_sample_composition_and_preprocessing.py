# -*- coding: utf-8 -*-
"""Retinoblastoma Cancerous-Normal Sample Composition and Preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vYe-Ka_PO54hnIQG3j7O4p6CkkJ9DH1s
"""

import scanpy as sc
import numpy as np
import pandas as pd
import seaborn as sns
import infercnvpy as cnv
import matplotlib.pyplot as plt
import statistics as stats

sc.settings.verbosity = 3
sc.logging.print_header()
sc.settings.set_figure_params(dpi=80, facecolor='white')

"""# GRCh37 Ensembl 75 Database Processing"""

database = pd.read_csv('GRCh37 Ensembl 75 Gene Annotations.txt', delimiter = '\t')
database['Chromosome Name'] = 'chr' + database['Chromosome Name'].astype(str)

"""# Retinoblastoma Xenograft Sample Preprocessing and Clustering"""

xenograft_samples = ['GSM5289077', 'GSM5289078', 'GSM5289079', 'GSM5289080', 'GSM5289081', 'GSM5289082', 'GSM5289083', 
                     'GSM5289084', 'GSM5289085', 'GSM5289086', 'GSM5289087', 'GSM5289088', 'GSM5289089', 'GSM5289090', 
                     'GSM5289091', 'GSM5289092', 'GSM5289093', 'GSM5289094', 'GSM5289096', 'GSM5289097']

for s in xenograft_samples:
    identity = s
    s = sc.read_10x_mtx('RB_xenograft/'+identity+'/', var_names='gene_symbols', cache=True)
    s.var_names_make_unique()
    sc.pl.highest_expr_genes(s, n_top=20, )
    sc.pp.filter_cells(s, min_genes=200)
    sc.pp.filter_genes(s, min_cells=3)
    s.var['mt'] = s.var_names.str.startswith('MT-')
    sc.pp.calculate_qc_metrics(s, qc_vars=['mt'], percent_top=None, log1p=False, inplace=True)
    sns.jointplot(data=s.obs, x='total_counts', y='n_genes_by_counts', kind='hex')
    sc.pl.violin(s, ['n_genes_by_counts', 'total_counts', 'pct_counts_mt'], jitter=0.4, multi_panel=True)
    sc.pl.scatter(s, x='total_counts', y='pct_counts_mt')
    sc.pl.scatter(s, x='total_counts', y='n_genes_by_counts')
    s = s[s.obs.n_genes_by_counts < 2500, :]
    s = s[s.obs.pct_counts_mt < 5, :]
    sc.pp.normalize_total(s, target_sum=1e4)
    sc.pp.log1p(s)
    sc.pp.highly_variable_genes(s, min_mean=0.0125, max_mean=3, min_disp=0.5)
    sc.pl.highly_variable_genes(s)
    s = s[:, s.var.highly_variable]
    sc.pp.regress_out(s, ['total_counts', 'pct_counts_mt'])
    sc.pp.scale(s, max_value=10)
    sc.tl.pca(s, svd_solver='arpack')
    sc.pl.pca_variance_ratio(s, log=True)
    sc.pp.neighbors(s, n_neighbors=10, n_pcs=40)
    sc.tl.umap(s)
    sc.tl.leiden(s)
    sc.pl.umap(s, color=['leiden'])
    sc.tl.rank_genes_groups(s, groupby='leiden', n_genes=len(s.var), use_raw=False)
    sc.pl.rank_genes_groups(s, n_genes=len(s.var), sharey=False)
    s.var['chromosome'] = 0
    s.var = s.var.astype({'chromosome': 'string'})
    s.var['start'] = 0
    s.var = s.var.astype({'start': int})
    s.var['end'] = 0
    s.var = s.var.astype({'end': int})
    for x in list(s.var['gene_ids']):
        if x in list(database['Ensembl Gene ID']):
            location_sample = list(s.var.index.values[(s.var['gene_ids'] == x)])
            location_database = database.loc[database['Ensembl Gene ID'] == x]
            chromosome = list(location_database['Chromosome Name'])
            s.var.at[location_sample[0], 'chromosome'] = str(chromosome[0])
            start = list(location_database['Gene Start (bp)'])
            s.var.at[location_sample[0], 'start'] = start[0]
            end = list(location_database['Gene End (bp)'])
            s.var.at[location_sample[0], 'end'] = end[0]
    result = s.uns['rank_genes_groups']
    groups = result['names'].dtype.names
    dat = pd.DataFrame(
        {group + '_' + key[:1]: result[key][group]
         for group in groups for key in ['names', 'logfoldchanges','scores','pvals']})
    dat.to_csv('RB_xenograft/'+identity+'/combined_groups.csv')
    s.write('RB_xenograft/'+identity+'/filtered.h5ad')

for s_filtered in xenograft_samples:
    identity = s_filtered
    s_filtered = sc.read_h5ad('RB_xenograft/'+identity+'/filtered.h5ad')
    s_filtered.obs['cell_type'] = s_filtered.obs['leiden']
    s_filtered.obs = s_filtered.obs.astype({'cell_type': 'string'})
    annotation_results = pd.read_csv('RB_xenograft/'+identity+'/cell_type_predictions', delimiter = '\t')
    clusters_filter = list(annotation_results['Cluster'].drop_duplicates())
    clusters_filter.sort()
    cell_type_clusters = []
    count = -1
    for x in clusters_filter:
        count = count + 1
        cluster = annotation_results.loc[annotation_results['Cluster'] == x]
        predicted_cell_data = list(cluster.values[0])
        cell_type_clusters.append(predicted_cell_data[0])
        cell_type_clusters.index(predicted_cell_data[0], count)
        s_filtered.obs['cell_type'].replace({str(count): predicted_cell_data[0]}, inplace=True)
    print(identity)
    print(cell_type_clusters)
    sc.pl.umap(s_filtered, color='cell_type')
    s_filtered.write('RB_xenograft/'+identity+'/filtered.h5ad')

for s_annotated in xenograft_samples:
    identity = s_annotated
    s_annotated = sc.read_h5ad('RB_xenograft/'+identity+'/filtered.h5ad')
    cnv.tl.infercnv(s_annotated, reference_key='cell_type', window_size=250,)
    cnv.pl.chromosome_heatmap(s_annotated, groupby='cell_type')
    cnv.tl.pca(s_annotated)
    cnv.pp.neighbors(s_annotated)
    cnv.tl.leiden(s_annotated)
    cnv.pl.chromosome_heatmap(s_annotated, groupby='cnv_leiden', dendrogram=True)
    cnv.tl.umap(s_annotated)
    cnv.tl.cnv_score(s_annotated)
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(11, 11))
    ax4.axis('off')
    cnv.pl.umap(s_annotated, color='cnv_leiden', legend_loc='on data', legend_fontoutline=2, ax=ax1, show=False,)
    cnv.pl.umap(s_annotated, color='cnv_score', ax=ax2, show=False)
    cnv.pl.umap(s_annotated, color='cell_type', ax=ax3)
    s_annotated.write('RB_xenograft/'+identity+'/filtered.h5ad')

for s_cnv in xenograft_samples:
    identity = s_cnv
    s_cnv = sc.read_h5ad('RB_xenograft/'+identity+'/filtered.h5ad')
    s_cnv.obs['cnv_status'] = 'normal'
    cnv_values = list(s_cnv.obs['cnv_score'].drop_duplicates())
    mean = stats.mean(cnv_values)
    tumorous_region = s_cnv.obs.loc[s_cnv.obs['cnv_score'] > mean]
    tumor_clusters = list(tumorous_region['cnv_leiden'].drop_duplicates())
    s_cnv.obs.loc[s_cnv.obs['cnv_leiden'].isin(tumor_clusters), 'cnv_status'] = 'tumor'
    print(identity)
    retinoblastoma_markers = ['RASSFIA', 'EPCAM', 'MGMT', 'TFF1', 'EZH2', 'UHRF1', 'MMP2', 'TNC', 'CTNNB1', 'CRABP2', 
                              'CRYAA', 'APOA1', 'VIM', 'GFAP', 'RBP3', 'LMNB1', 'TFRC', 'MDM2', 'MDM4', 'EXOC8', 
                              'CHTOP', 'NUCKS1', 'ADSS', 'SOX2', 'LDH', 'TFF3', 'SERTAD3', 'RB1', 'MYCN']
    marker_genes = []
    for x in retinoblastoma_markers:
        if x in list(s_cnv.var.index.values):
            marker_genes.append(x)
    if (len(marker_genes) > 0):
        sc.pl.tracksplot(s_cnv, marker_genes, groupby='cnv_leiden', dendrogram=True)
        sc.pl.dotplot(s_cnv, marker_genes, groupby='cnv_status')
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5), gridspec_kw=dict(wspace=0.5))
    cnv.pl.umap(s_cnv, color='cnv_status', ax=ax1, show=False)
    sc.pl.umap(s_cnv, color='cnv_status', ax=ax2)
    cnv.pl.chromosome_heatmap(s_cnv[s_cnv.obs['cnv_status'] == 'tumor', :])
    cnv.pl.chromosome_heatmap(s_cnv[s_cnv.obs['cnv_status'] == 'normal', :])
    s_cnv.write('RB_xenograft/'+identity+'/filtered.h5ad')

GSM5289077 = sc.read_h5ad('RB_xenograft/GSM5289077/filtered.h5ad')
GSM5289078 = sc.read_h5ad('RB_xenograft/GSM5289078/filtered.h5ad')
GSM5289079 = sc.read_h5ad('RB_xenograft/GSM5289079/filtered.h5ad')
GSM5289080 = sc.read_h5ad('RB_xenograft/GSM5289080/filtered.h5ad')
GSM5289081 = sc.read_h5ad('RB_xenograft/GSM5289081/filtered.h5ad')
GSM5289082 = sc.read_h5ad('RB_xenograft/GSM5289082/filtered.h5ad')
GSM5289083 = sc.read_h5ad('RB_xenograft/GSM5289083/filtered.h5ad')
GSM5289084 = sc.read_h5ad('RB_xenograft/GSM5289084/filtered.h5ad')
GSM5289085 = sc.read_h5ad('RB_xenograft/GSM5289085/filtered.h5ad')
GSM5289086 = sc.read_h5ad('RB_xenograft/GSM5289086/filtered.h5ad')
GSM5289087 = sc.read_h5ad('RB_xenograft/GSM5289087/filtered.h5ad')
GSM5289088 = sc.read_h5ad('RB_xenograft/GSM5289088/filtered.h5ad')
GSM5289089 = sc.read_h5ad('RB_xenograft/GSM5289089/filtered.h5ad')
GSM5289090 = sc.read_h5ad('RB_xenograft/GSM5289090/filtered.h5ad')
GSM5289091 = sc.read_h5ad('RB_xenograft/GSM5289091/filtered.h5ad')
GSM5289092 = sc.read_h5ad('RB_xenograft/GSM5289092/filtered.h5ad')
GSM5289093 = sc.read_h5ad('RB_xenograft/GSM5289093/filtered.h5ad')
GSM5289094 = sc.read_h5ad('RB_xenograft/GSM5289094/filtered.h5ad')
GSM5289096 = sc.read_h5ad('RB_xenograft/GSM5289096/filtered.h5ad')
GSM5289097 = sc.read_h5ad('RB_xenograft/GSM5289097/filtered.h5ad')

RB_xenograft = GSM5289077.concatenate(GSM5289078, GSM5289079, GSM5289080, GSM5289081, GSM5289082, GSM5289083, GSM5289084, 
                                      GSM5289085, GSM5289086, GSM5289087, GSM5289088, GSM5289089, GSM5289090, GSM5289091,
                                      GSM5289092, GSM5289093, GSM5289094, GSM5289096, GSM5289097)
if (len(list(RB_tumor.var.loc[:,RB_tumor.var.columns.str.contains("chromosome-")].columns)) > 0):
    for x in list(RB_tumor.var.loc[:,RB_tumor.var.columns.str.contains("chromosome-")].columns):
        RB_tumor.var['chromosome'] = RB_tumor.var[x]
        RB_tumor.var = RB_tumor.var.drop(columns=[x])
if (len(list(RB_tumor.var.loc[:,RB_tumor.var.columns.str.contains("gene_ids-")].columns)) > 0):
    for x in list(RB_tumor.var.loc[:,RB_tumor.var.columns.str.contains("gene_ids-")].columns):
        RB_tumor.var['gene_ids'] = RB_tumor.var[x]
        RB_tumor.var = RB_tumor.var.drop(columns=[x])
if (len(list(RB_tumor.var.loc[:,RB_tumor.var.columns.str.contains("start-")].columns)) > 0):
    for x in list(RB_tumor.var.loc[:,RB_tumor.var.columns.str.contains("start-")].columns):
        RB_tumor.var['start'] = RB_tumor.var[x]
        RB_tumor.var = RB_tumor.var.drop(columns=[x])
if (len(list(RB_tumor.var.loc[:,RB_tumor.var.columns.str.contains("end-")].columns)) > 0):
    for x in list(RB_tumor.var.loc[:,RB_tumor.var.columns.str.contains("end-")].columns):
        RB_tumor.var['end'] = RB_tumor.var[x]
        RB_tumor.var = RB_tumor.var.drop(columns=[x])
sc.tl.pca(RB_xenograft, svd_solver='arpack')
sc.pl.pca_variance_ratio(RB_xenograft, log=True)
sc.pp.neighbors(RB_xenograft, n_neighbors=10, n_pcs=40)
sc.tl.umap(RB_xenograft)
sc.tl.leiden(RB_xenograft)
sc.pl.umap(RB_xenograft, color=['leiden'])
sc.tl.rank_genes_groups(RB_xenograft, groupby='leiden', n_genes=len(RB_xenograft.var), use_raw=False)
sc.pl.rank_genes_groups(RB_xenograft, n_genes=len(RB_xenograft.var), sharey=False)
result = RB_xenograft.uns['rank_genes_groups']
groups = result['names'].dtype.names
dat = pd.DataFrame(
    {group + '_' + key[:1]: result[key][group]
     for group in groups for key in ['names', 'logfoldchanges','scores','pvals']})
dat.to_csv('RB_xenograft/combined_groups.csv')
RB_xenograft.write('RB_xenograft/final_processed.h5ad')

RB_xenograft = sc.read_h5ad('RB_xenograft/final_processed.h5ad')
del RB_xenograft.obs['cell_type']
del RB_xenograft.obs['cnv_score']
del RB_xenograft.obs['cnv_leiden']
RB_xenograft.obs['cell_type'] = RB_xenograft.obs['leiden']
RB_xenograft.obs = RB_xenograft.obs.astype({'cell_type': 'string'})
annotation_results = pd.read_csv('RB_xenograft/cell_type_predictions', delimiter = '\t')
clusters_filter = list(annotation_results['Cluster'].drop_duplicates())
clusters_filter.sort()
cell_type_clusters = []
count = -1
for x in clusters_filter:
    count = count + 1
    cluster = annotation_results.loc[annotation_results['Cluster'] == x]
    predicted_cell_data = list(cluster.values[0])
    cell_type_clusters.append(predicted_cell_data[0])
    cell_type_clusters.index(predicted_cell_data[0], count)
    RB_xenograft.obs['cell_type'].replace({str(count): predicted_cell_data[0]}, inplace=True)
print(cell_type_clusters)
sc.pl.umap(RB_xenograft, color='cell_type')
RB_xenograft.write('RB_xenograft/final_processed.h5ad')

RB_xenograft = sc.read_h5ad('RB_xenograft/final_processed.h5ad')
cnv.tl.infercnv(RB_xenograft, reference_key='cell_type', window_size=250,)
cnv.pl.chromosome_heatmap(RB_xenograft, groupby='cell_type')
cnv.tl.pca(RB_xenograft)
cnv.pp.neighbors(RB_xenograft)
cnv.tl.leiden(RB_xenograft)
cnv.pl.chromosome_heatmap(RB_xenograft, groupby='cnv_leiden', dendrogram=True)
cnv.tl.umap(RB_xenograft)
cnv.tl.cnv_score(RB_xenograft)
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(11, 11))
ax4.axis('off')
cnv.pl.umap(RB_xenograft, color='cnv_leiden', legend_loc='on data', legend_fontoutline=2, ax=ax1, show=False,)
cnv.pl.umap(RB_xenograft, color='cnv_score', ax=ax2, show=False)
cnv.pl.umap(RB_xenograft, color='cell_type', ax=ax3)
RB_xenograft.write('RB_xenograft/final_processed.h5ad')

RB_xenograft = sc.read_h5ad('RB_xenograft/final_processed.h5ad')
sc.pl.rank_genes_groups_tracksplot(RB_xenograft, n_genes=10)
sc.pl.rank_genes_groups_heatmap(RB_xenograft, n_genes=10, use_raw=False, swap_axes=True, show_gene_labels=False, 
                                vmin=-3, vmax=3, cmap='bwr')
RB_xenograft.write('RB_xenograft/final_processed.h5ad')

RB_xenograft = sc.read_h5ad('RB_xenograft/final_processed.h5ad')
RB_xenograft.obs['cnv_status_change'] = 'normal'
cnv_values = list(RB_xenograft.obs['cnv_score'].drop_duplicates())
mean = stats.mean(cnv_values)
tumorous_region = RB_xenograft.obs.loc[RB_xenograft.obs['cnv_score'] > mean]
tumor_clusters = list(tumorous_region['cnv_leiden'].drop_duplicates())
RB_xenograft.obs.loc[RB_xenograft.obs['cnv_leiden'].isin(tumor_clusters), 'cnv_status_change'] = 'tumor'
retinoblastoma_markers = ['RASSFIA', 'EPCAM', 'MGMT', 'TFF1', 'EZH2', 'UHRF1', 'MMP2', 'TNC', 'CTNNB1', 'CRABP2', 
                          'CRYAA', 'APOA1', 'VIM', 'GFAP', 'RBP3', 'LMNB1', 'TFRC', 'MDM2', 'MDM4', 'EXOC8', 
                          'CHTOP', 'NUCKS1', 'ADSS', 'SOX2', 'LDH', 'TFF3', 'SERTAD3', 'RB1', 'MYCN']
marker_genes = []
for x in retinoblastoma_markers:
    if x in list(RB_xenograft.var.index.values):
        marker_genes.append(x)
if (len(marker_genes) > 0):
    sc.pl.dotplot(RB_xenograft, marker_genes, groupby='cnv_status_change')
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5), gridspec_kw=dict(wspace=0.5))
cnv.pl.umap(RB_xenograft, color='cnv_status_change', ax=ax1, show=False)
sc.pl.umap(RB_xenograft, color='cnv_status_change', ax=ax2)
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5), gridspec_kw=dict(wspace=0.5))
cnv.pl.umap(RB_xenograft, color='cnv_status', ax=ax1, show=False)
sc.pl.umap(RB_xenograft, color='cnv_status', ax=ax2)
cnv.pl.chromosome_heatmap(RB_xenograft[RB_xenograft.obs['cnv_status_change'] == 'tumor', :])
cnv.pl.chromosome_heatmap(RB_xenograft[RB_xenograft.obs['cnv_status_change'] == 'normal', :])
comparison_column = np.where(RB_xenograft.obs['cnv_status_change'] == RB_xenograft.obs['cnv_status'], True, False)
RB_xenograft.obs['tissue_equality'] = comparison_column
print(RB_xenograft.obs['tissue_equality'].value_counts())
RB_xenograft.write('RB_xenograft/final_processed.h5ad')

"""# Normal Retina Sample Preprocessing and Clustering"""

normal_samples_mtx = ['GSM5065157', 'GSM5065158', 'GSM5065159', 'GSM5065160', 'GSM5065161', 'GSM5065162', 'GSM5065163', 
                      'GSM5065166', 'GSM5289075', 'GSM5289076', 'GSM5289098', 'GSM5289099', 'GSM5289100', 'GSM5468185', 
                      'GSM5577281']
normal_samples_loom = ['GSM4996499', 'GSM4996500']
normal_samples = ['GSM5065157', 'GSM5065158', 'GSM5065159', 'GSM5065160', 'GSM5065161', 'GSM5065162', 'GSM5065163', 
                  'GSM5065166', 'GSM5289075', 'GSM5289076', 'GSM5289098', 'GSM5289099', 'GSM5289100', 'GSM5468185', 
                  'GSM5577281', 'GSM4996499', 'GSM4996500']

for s in normal_samples_mtx:
    identity = s
    s = sc.read_10x_mtx('retina_normal/'+identity+'/', var_names='gene_symbols', cache=True)
    s.var_names_make_unique()
    sc.pl.highest_expr_genes(s, n_top=20, )
    sc.pp.filter_cells(s, min_genes=200)
    sc.pp.filter_genes(s, min_cells=3)
    s.var['mt'] = s.var_names.str.startswith('MT-')
    sc.pp.calculate_qc_metrics(s, qc_vars=['mt'], percent_top=None, log1p=False, inplace=True)
    sns.jointplot(data=s.obs, x='total_counts', y='n_genes_by_counts', kind='hex')
    sc.pl.violin(s, ['n_genes_by_counts', 'total_counts', 'pct_counts_mt'], jitter=0.4, multi_panel=True)
    sc.pl.scatter(s, x='total_counts', y='pct_counts_mt')
    sc.pl.scatter(s, x='total_counts', y='n_genes_by_counts')
    s = s[s.obs.n_genes_by_counts < 2500, :]
    s = s[s.obs.pct_counts_mt < 5, :]
    sc.pp.normalize_total(s, target_sum=1e4)
    sc.pp.log1p(s)
    sc.pp.highly_variable_genes(s, min_mean=0.0125, max_mean=3, min_disp=0.5)
    sc.pl.highly_variable_genes(s)
    s = s[:, s.var.highly_variable]
    sc.pp.regress_out(s, ['total_counts', 'pct_counts_mt'])
    sc.pp.scale(s, max_value=10)
    sc.tl.pca(s, svd_solver='arpack')
    sc.pl.pca_variance_ratio(s, log=True)
    sc.pp.neighbors(s, n_neighbors=10, n_pcs=40)
    sc.tl.umap(s)
    sc.tl.leiden(s)
    sc.pl.umap(s, color=['leiden'])
    sc.tl.rank_genes_groups(s, groupby='leiden', n_genes=len(s.var), use_raw=False)
    sc.pl.rank_genes_groups(s, n_genes=len(s.var), sharey=False)
    s.var['chromosome'] = 0
    s.var = s.var.astype({'chromosome': 'string'})
    s.var['start'] = 0
    s.var = s.var.astype({'start': int})
    s.var['end'] = 0
    s.var = s.var.astype({'end': int})
    for x in list(s.var['gene_ids']):
        if x in list(database['Ensembl Gene ID']):
            location_sample = list(s.var.index.values[(s.var['gene_ids'] == x)])
            location_database = database.loc[database['Ensembl Gene ID'] == x]
            chromosome = list(location_database['Chromosome Name'])
            s.var.at[location_sample[0], 'chromosome'] = str(chromosome[0])
            start = list(location_database['Gene Start (bp)'])
            s.var.at[location_sample[0], 'start'] = start[0]
            end = list(location_database['Gene End (bp)'])
            s.var.at[location_sample[0], 'end'] = end[0]
    result = s.uns['rank_genes_groups']
    groups = result['names'].dtype.names
    dat = pd.DataFrame(
        {group + '_' + key[:1]: result[key][group]
         for group in groups for key in ['names', 'logfoldchanges','scores','pvals']})
    dat.to_csv('retina_normal/'+identity+'/combined_groups.csv')
    s.write('retina_normal/'+identity+'/filtered.h5ad')

for s in normal_samples_loom:
    identity = s
    s = sc.read_loom('retina_normal/'+identity+'/matrix.loom')
    s.var_names_make_unique()
    if 'ClusterID' and 'X' and 'Y' in s.obs:
        del s.obs['ClusterID']
        del s.obs['X']
        del s.obs['Y']
    if 'Clusters' and '_X' and '_Y' in s.obs:
        del s.obs['Clusters']
        del s.obs['_X']
        del s.obs['_Y']
    if 'Chromosome' and 'End' and 'Start' and 'Strand' in s.var:
        del s.var['Chromosome']
        del s.var['End']
        del s.var['Start']
        del s.var['Strand']
    if 'matrix' and 'ambiguous' and 'spliced' and 'unspliced' in s.layers:
        del s.layers['matrix']
        del s.layers['ambiguous']
        del s.layers['spliced']
        del s.layers['unspliced']
    s.var = s.var.rename(columns={'Accession': 'gene_ids'})
    s.var['feature_types'] = 'Gene Expression'
    sc.pl.highest_expr_genes(s, n_top=20, )
    sc.pp.filter_cells(s, min_genes=200)
    sc.pp.filter_genes(s, min_cells=3)
    s.var['mt'] = s.var_names.str.startswith('MT-')
    sc.pp.calculate_qc_metrics(s, qc_vars=['mt'], percent_top=None, log1p=False, inplace=True)
    sns.jointplot(data=s.obs, x='total_counts', y='n_genes_by_counts', kind='hex')
    sc.pl.violin(s, ['n_genes_by_counts', 'total_counts', 'pct_counts_mt'], jitter=0.4, multi_panel=True)
    sc.pl.scatter(s, x='total_counts', y='pct_counts_mt')
    sc.pl.scatter(s, x='total_counts', y='n_genes_by_counts')
    s = s[s.obs.n_genes_by_counts < 2500, :]
    s = s[s.obs.pct_counts_mt < 5, :]
    sc.pp.normalize_total(s, target_sum=1e4)
    sc.pp.log1p(s)
    sc.pp.highly_variable_genes(s, min_mean=0.0125, max_mean=3, min_disp=0.5)
    sc.pl.highly_variable_genes(s)
    s = s[:, s.var.highly_variable]
    sc.pp.regress_out(s, ['total_counts', 'pct_counts_mt'])
    sc.pp.scale(s, max_value=10)
    sc.tl.pca(s, svd_solver='arpack')
    sc.pl.pca_variance_ratio(s, log=True)
    sc.pp.neighbors(s, n_neighbors=10, n_pcs=40)
    sc.tl.umap(s)
    sc.tl.leiden(s)
    sc.pl.umap(s, color=['leiden'])
    sc.tl.rank_genes_groups(s, groupby='leiden', n_genes=len(s.var), use_raw=False)
    sc.pl.rank_genes_groups(s, n_genes=len(s.var), sharey=False)
    s.var['chromosome'] = 0
    s.var = s.var.astype({'chromosome': 'string'})
    s.var['start'] = 0
    s.var = s.var.astype({'start': int})
    s.var['end'] = 0
    s.var = s.var.astype({'end': int})
    for x in list(s.var['gene_ids']):
        if x in list(database['Ensembl Gene ID']):
            location_sample = list(s.var.index.values[(s.var['gene_ids'] == x)])
            location_database = database.loc[database['Ensembl Gene ID'] == x]
            chromosome = list(location_database['Chromosome Name'])
            s.var.at[location_sample[0], 'chromosome'] = str(chromosome[0])
            start = list(location_database['Gene Start (bp)'])
            s.var.at[location_sample[0], 'start'] = start[0]
            end = list(location_database['Gene End (bp)'])
            s.var.at[location_sample[0], 'end'] = end[0]
    result = s.uns['rank_genes_groups']
    groups = result['names'].dtype.names
    dat = pd.DataFrame(
        {group + '_' + key[:1]: result[key][group]
         for group in groups for key in ['names', 'logfoldchanges','scores','pvals']})
    dat.to_csv('retina_normal/'+identity+'/combined_groups.csv')
    s.write('retina_normal/'+identity+'/filtered.h5ad')

for s_filtered in normal_samples:
    identity = s_filtered
    s_filtered = sc.read_h5ad('retina_normal/'+identity+'/filtered.h5ad')
    s_filtered.obs['cell_type'] = s_filtered.obs['leiden']
    s_filtered.obs = s_filtered.obs.astype({'cell_type': 'string'})
    annotation_results = pd.read_csv('retina_normal/'+identity+'/cell_type_predictions', delimiter = '\t')
    clusters_filter = list(annotation_results['Cluster'].drop_duplicates())
    clusters_filter.sort()
    cell_type_clusters = []
    count = -1
    for x in clusters_filter:
        count = count + 1
        cluster = annotation_results.loc[annotation_results['Cluster'] == x]
        predicted_cell_data = list(cluster.values[0])
        cell_type_clusters.append(predicted_cell_data[0])
        cell_type_clusters.index(predicted_cell_data[0], count)
        s_filtered.obs['cell_type'].replace({str(count): predicted_cell_data[0]}, inplace=True)
    print(identity)
    print(cell_type_clusters)
    sc.pl.umap(s_filtered, color='cell_type')
    s_filtered.write('retina_normal/'+identity+'/filtered.h5ad')

for s_annotated in normal_samples:
    identity = s_annotated
    s_annotated = sc.read_h5ad('retina_normal/'+identity+'/filtered.h5ad')
    cnv.tl.infercnv(s_annotated, reference_key='cell_type', window_size=250,)
    cnv.pl.chromosome_heatmap(s_annotated, groupby='cell_type')
    cnv.tl.pca(s_annotated)
    cnv.pp.neighbors(s_annotated)
    cnv.tl.leiden(s_annotated)
    cnv.pl.chromosome_heatmap(s_annotated, groupby='cnv_leiden', dendrogram=True)
    cnv.tl.umap(s_annotated)
    cnv.tl.cnv_score(s_annotated)
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(11, 11))
    ax4.axis('off')
    cnv.pl.umap(s_annotated, color='cnv_leiden', legend_loc='on data', legend_fontoutline=2, ax=ax1, show=False,)
    cnv.pl.umap(s_annotated, color='cnv_score', ax=ax2, show=False)
    cnv.pl.umap(s_annotated, color='cell_type', ax=ax3)
    s_annotated.write('retina_normal/'+identity+'/filtered.h5ad')