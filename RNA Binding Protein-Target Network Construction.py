# -*- coding: utf-8 -*-
"""RNA Binding Protein-Target Network Construction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S1tBO_x7egxlr2-btvFFHlYjByas9wV_
"""

import networkx as nx
import pandas as pd
import glob
from matplotlib.pyplot import figure
import pickle

I = nx.DiGraph()
U = nx.DiGraph()
N = nx.DiGraph()
bbls_threshold = 5
tss_up_threshold = 1500
tss_down_threshold = 250
z_score = 3
RBP_motif_data = pd.read_csv('RBP-Motif Data.csv')

"""# RNA Binding Protein-Intronic Targets Network"""

for f in glob.glob('introns_rbps/*.tsv'):
    motif_id = f.split("/")[1].split(".FILTERED")[0]
    for x in RBP_motif_data.values.tolist():
        if x[1] == motif_id:
            file = 'introns_rbps/'+x[1]+'.FILTERED.tsv'
            df = pd.read_csv(file, sep='\t')
            if "DistanceToTSS" and "ZScore" and "BBLS" in df.columns:
                I.add_node(x[0])
                df = df[df["BBLS"] > bbls_threshold]
                df = df[(tss_down_threshold < df["DistanceToTSS"]) & (tss_up_threshold > df["DistanceToTSS"])]
                df = df[df["ZScore"] > z_score]
                df = df.drop_duplicates(subset = "ClosestGene")
                for row in df["ClosestGene"]:
                    close_genes = df[df["ClosestGene"]==row]
                    I.add_edge(x[0], row, color ='r')
figure(figsize=(40, 40))
edges = I.edges()
colors = [I[u][v]["color"] for u,v in edges]
nx.draw(I, with_labels=True, edge_color=colors)

"""# RNA Binding Protein-Untranslated Region Targets Network"""

for f in glob.glob('utr_rbps/*.tsv'):
    motif_id = f.split("/")[1].split(".FILTERED")[0]
    for x in RBP_motif_data.values.tolist():
        if x[1] == motif_id:
            file = 'utr_rbps/'+x[1]+'.FILTERED.tsv'
            df = pd.read_csv(file, sep='\t')
            if "DistanceToTSS" and "ZScore" and "BBLS" in df.columns:
                U.add_node(x[0])
                df = df[df["BBLS"] > bbls_threshold]
                df = df[(tss_down_threshold < df["DistanceToTSS"]) & (tss_up_threshold > df["DistanceToTSS"])]
                df = df[df["ZScore"] > z_score]
                df = df.drop_duplicates(subset = "ClosestGene")
                for row in df["ClosestGene"]:
                    close_genes = df[df["ClosestGene"]==row]
                    U.add_edge(x[0], row, color ='#36ba3d')
figure(figsize=(40, 40))
edges = U.edges()
colors = [U[u][v]["color"] for u,v in edges]
nx.draw(U, with_labels=True, edge_color=colors)

"""# RNA Binding Protein-Noncoding RNA Targets Network"""

for f in glob.glob('non_rbps/*.tsv'):
    motif_id = f.split("/")[1].split(".FILTERED")[0]
    for x in RBP_motif_data.values.tolist():
        if x[1] == motif_id:
            file = 'non_rbps/'+x[1]+'.FILTERED.tsv'
            df = pd.read_csv(file, sep='\t')
            if "DistanceToTSS" and "ZScore" and "BBLS" in df.columns:
                N.add_node(x[0])
                df = df[df["BBLS"] > bbls_threshold]
                df = df[(tss_down_threshold < df["DistanceToTSS"]) & (tss_up_threshold > df["DistanceToTSS"])]
                df = df[df["ZScore"] > z_score]
                df = df.drop_duplicates(subset = "ClosestGene")
                for row in df["ClosestGene"]:
                    close_genes = df[df["ClosestGene"]==row]
                    N.add_edge(x[0], row, color ='#EE7714')
figure(figsize=(40, 40))
edges = N.edges()
colors = [N[u][v]["color"] for u,v in edges]
nx.draw(N, with_labels=True, edge_color=colors)

"""# Similar Classification RNA Binding Protein-Targets Network"""

I_list = list(I.edges)
U_list = list(U.edges)
N_list = list(N.edges)
compare_I_N = set(I_list).intersection(set(N_list))
compare_I_U = set(I_list).intersection(set(U_list))
compare_N_U = set(N_list).intersection(set(U_list))
S_li = list(compare_I_N) + list(compare_I_U) + list(compare_N_U)
S_list = []
for i in S_li:
    if i not in S_list:
        S_list.append(i)
df_S = pd.DataFrame(S_list)
S = nx.DiGraph()
for index, row in df_S.iterrows():
    S.add_edge(row[0], row[1], color ='y')
figure(figsize=(40, 40))
edges = S.edges()
colors = [S[u][v]["color"] for u,v in edges]
nx.draw(S, with_labels=True, edge_color=colors)

"""# Combined Classification RNA Binding Protein-Targets Network"""

I_set = set(I_list)
U_set = set(U_list)
N_set = set(N_list)
S_set = set(S_list)
I_less_A = I_set - S_set
I_less_B = S_set - I_set
I_less_list = list(I_less_A) + list(I_less_B)
U_less_A = U_set - S_set
U_less_B = S_set - U_set
U_less_list = list(U_less_A) + list(U_less_B)
N_less_A = N_set - S_set
N_less_B = S_set - N_set
N_less_list = list(N_less_A) + list(N_less_B)
df_I = pd.DataFrame(I_less_list)
I_less = nx.DiGraph()
for index, row in df_I.iterrows():
    I_less.add_edge(row[0], row[1], color ='r')
df_U = pd.DataFrame(U_less_list)
U_less = nx.DiGraph()
for index, row in df_U.iterrows():
    U_less.add_edge(row[0], row[1], color = '#36ba3d')
df_N = pd.DataFrame(N_less_list)
N_less = nx.DiGraph()
for index, row in df_N.iterrows():
    N_less.add_edge(row[0], row[1], color = '#EE7714')

C = nx.DiGraph()
C = nx.compose_all([I_less, U_less, N_less, S])
C_list = list(C.edges)
figure(figsize=(40, 40))
if any(i in I_less_list for i in C_list) == True:
    color="r"
    colors = [C[u][v]["color"] for u,v in I_less.edges]
    nx.draw(C, with_labels=True, edge_color=colors)
if any(i in U_less_list for i in C_list) == True:
    color="#36ba3d"
    colors = [C[u][v]["color"] for u,v in U_less.edges]
    nx.draw(C, with_labels=True, edge_color=colors)
if any(i in N_less_list for i in C_list) == True:
    color="#EE7714"
    colors = [C[u][v]["color"] for u,v in N_less.edges]
    nx.draw(C, with_labels=True, edge_color=colors)
if any(i in S_list for i in C_list) == True:
    color="y"
    colors = [C[u][v]["color"] for u,v in S.edges]
    nx.draw(C, with_labels=True, edge_color=colors)

pickle_c = open('combined_network.pkl', 'wb')
pickle.dump(C, pickle_c)
pickle_i = open('intron_network.pkl', 'wb')
pickle.dump(I_less, pickle_i)
pickle_u = open('utr_network.pkl', 'wb')
pickle.dump(U_less, pickle_u)
pickle_n = open('non_network.pkl', 'wb')
pickle.dump(N_less, pickle_n)
pickle_s = open('similar_network.pkl', 'wb')
pickle.dump(S, pickle_n)
pickle_c.close()
pickle_i.close()
pickle_u.close()
pickle_n.close()
pickle_s.close()
