# -*- coding: utf-8 -*-
"""Retinoblastoma-RNA Binding Protein Network Alignment and Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CHj5m7DcqmhRDKuyI4xUgSpwmdLWam_s
"""

import networkx as nx
import pickle
import scanpy as sc
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
import gseapy as gp
from gseapy.plot import barplot, dotplot

sc.settings.verbosity = 3
sc.logging.print_header()
sc.settings.set_figure_params(dpi=80, facecolor='white')

RB_xenograft = sc.read('RB_xenograft/final_processed.h5ad', cache=True)
I = pickle.load(open("intron_network.pkl", "rb"))
U = pickle.load(open("utr_network.pkl", "rb"))
N = pickle.load(open("non_network.pkl", "rb"))
S = pickle.load(open("similar_network.pkl", "rb"))
C = pickle.load(open("combined_network.pkl", "rb"))
network_RBPs = set()
network_targets = set()
for edge in C.edges():
    network_RBPs.add(edge[0])
    network_targets.add(edge[1])

"""# Combined RBP-Targets Network-Retinoblastoma Xenograft Samples Analysis"""

abnormal_regulated_RBPs = set(RB_xenograft.var.index.values).intersection(network_RBPs)
abnormal_regulated_targets = set(RB_xenograft.var.index.values).intersection(network_targets)
total_RBPs = set()
valid_edges_out = []
for RBP in abnormal_regulated_RBPs:
    valid_edges_out.extend(list(C.out_edges(RBP)))
    total_RBPs.add(RBP)
valid_edges_in = []
for target in abnormal_regulated_targets:
    valid_edges_in.extend(list(C.in_edges(target)))
    for x in list(C.in_edges(target)):
        total_RBPs.add(x[0])

subC_temp = C.edge_subgraph(valid_edges_out + valid_edges_in)
subC = nx.DiGraph()
for edge in list(subC_temp.edges()):
    if edge in list(S.edges()):
        subC.add_edge(*edge, color='y')
    elif edge in list(I.edges()):
        subC.add_edge(*edge, color='r')
    elif edge in list(U.edges()):
        subC.add_edge(*edge, color='#36ba3d')
    elif edge in list(N.edges()):
        subC.add_edge(*edge, color='#EE7714')
total_targets = []
for edge in list(subC.edges()):
    total_targets.append(edge[1])
total_targets = list(dict.fromkeys(total_targets))
pos = nx.nx_agraph.graphviz_layout(subC, prog="neato",args="-Goverlap=scale -Elen=5 -Eweight=0.2")
fig = plt.figure(figsize=(20,10))
ax = plt.subplot(1,2,1)
colors = [subC[u][v]["color"] for u,v in subC.edges]
nx.draw(subC, pos, with_labels=True, ax=ax, edge_color=colors)
plt.axis('off')
plt.title('Combined Predicted RBP-Target Relationships in Xenograft Retinoblastoma')
plt.tight_layout()
plt.show()

GSEA_datasets = ['GO_Biological_Process_2021', 'GO_Cellular_Component_2021', 'GO_Molecular_Function_2021', 
                 'KEGG_2021_Human', 'MSigDB_Hallmark_2020', 'MSigDB_Oncogenic_Signatures', 'WikiPathway_2021_Human']

for gene_set in GSEA_datasets:
    enr = gp.enrichr(gene_list=(list(total_RBPs) + total_targets), gene_sets=[gene_set], organism='Human',
                     description='enrichr', outdir='overall_gene_enrichment/combined/'+gene_set, cutoff=0.05)
    barplot(enr.res2d,title=gene_set, cmap='viridis_r')
    dotplot(enr.res2d, title=gene_set, cutoff=0.05, cmap='seismic')

for gene_set in GSEA_datasets:
    combined_GEO = pd.read_csv('overall_gene_enrichment/combined/'+gene_set+'/xenograft_gene_enrichment.txt', sep='\t')
    ax = combined_GEO.plot(title='Predicted Species Gene Enrichment-'+gene_set)
    ax.set_xlabel("Index of Predicted Cellular Pathways/Mechanisms")

"""# Bilaterally Identified Abnormally Regulated Species Results and Analysis"""

sc.pl.matrixplot(RB_xenograft, list(abnormal_regulated_RBPs), 'cnv_leiden', swap_axes=True, dendrogram=True, cmap='plasma', standard_scale="var")
sc.pl.matrixplot(RB_xenograft, list(abnormal_regulated_RBPs), 'leiden', swap_axes=True, dendrogram=True, cmap='plasma', standard_scale="var")
sc.pl.matrixplot(RB_xenograft, list(abnormal_regulated_RBPs), 'cnv_status', swap_axes=True, dendrogram=True, cmap='plasma', standard_scale="var")
sc.pl.matrixplot(RB_xenograft, list(abnormal_regulated_RBPs), 'cnv_status_change', swap_axes=True, dendrogram=True, cmap='plasma', standard_scale="var")
sc.pl.violin(RB_xenograft, keys=abnormal_regulated_RBPs, groupby='cnv_status_change')
sc.pl.matrixplot(RB_xenograft, list(abnormal_regulated_RBPs), 'cell_type', swap_axes=True, dendrogram=True, cmap='plasma', standard_scale="var")
sc.pl.violin(RB_xenograft, keys=abnormal_regulated_RBPs, groupby='cell_type', rotation=90)
sc.pl.matrixplot(RB_xenograft, list(abnormal_regulated_RBPs), 'batch', swap_axes=True, dendrogram=True, cmap='plasma', standard_scale="var")

key_pathways = []
for gene_set in GSEA_datasets:
    combined_GEO = pd.read_csv('overall_gene_enrichment/combined/'+gene_set+'/xenograft_gene_enrichment.txt', sep='\t')
    combined_GEO = combined_GEO[combined_GEO['Adjusted P-value'] < 0.05]
    for RBP in abnormal_regulated_RBPs:
        RBP_pathways = combined_GEO[combined_GEO['Genes'].str.contains(RBP)]
        pathways = RBP_pathways['Term'].tolist()
        for pathway in pathways:
            key_pathways.append([RBP, pathway])
key_pathways.sort()
key_pathways_df = pd.DataFrame(key_pathways, columns=['RBP', 'Cellular Pathway'])
key_pathways_df

sc.pl.matrixplot(RB_xenograft, list(abnormal_regulated_targets), 'cnv_leiden', swap_axes=True, dendrogram=True, cmap='plasma', standard_scale="var")
sc.pl.matrixplot(RB_xenograft, list(abnormal_regulated_targets), 'leiden', swap_axes=True, dendrogram=True, cmap='plasma', standard_scale="var")
sc.pl.matrixplot(RB_xenograft, list(abnormal_regulated_targets), 'cnv_status', swap_axes=True, dendrogram=True, cmap='plasma', standard_scale="var")
sc.pl.matrixplot(RB_xenograft, list(abnormal_regulated_targets), 'cnv_status_change', swap_axes=True, dendrogram=True, cmap='plasma', standard_scale="var")
sc.pl.violin(RB_xenograft, keys=abnormal_regulated_targets, groupby='cnv_status_change')
sc.pl.matrixplot(RB_xenograft, list(abnormal_regulated_targets), 'cell_type', swap_axes=True, dendrogram=True, cmap='plasma', standard_scale="var")
sc.pl.violin(RB_xenograft, keys=abnormal_regulated_targets, groupby='cell_type', rotation=90)
sc.pl.matrixplot(RB_xenograft, list(abnormal_regulated_targets), 'batch', swap_axes=True, dendrogram=True, cmap='plasma', standard_scale="var")

key_pathways = []
for gene_set in GSEA_datasets:
    combined_GEO = pd.read_csv('overall_gene_enrichment/combined/'+gene_set+'/xenograft_gene_enrichment.txt', sep='\t')
    combined_GEO = combined_GEO[combined_GEO['Adjusted P-value'] < 0.05]
    for target in list(abnormal_regulated_targets):
        target_pathways = combined_GEO[combined_GEO['Genes'].str.contains(target)]
        pathways = target_pathways['Term'].tolist()
        for pathway in pathways:
            key_pathways.append([target, pathway])
key_pathways.sort()
key_pathways_df = pd.DataFrame(key_pathways, columns=['Target', 'Cellular Pathway'])
key_pathways_df

bilateral_network_temp = nx.DiGraph()
bilateral_network = nx.DiGraph()
for RBP in abnormal_regulated_RBPs:
    for target in abnormal_regulated_targets:
        for edge in list(C.out_edges(RBP)):
            if target == edge[1]:
                bilateral_network_temp.add_edge(RBP, target)
for edge in list(bilateral_network_temp.edges()):
    if edge in list(S.edges()):
        bilateral_network.add_edge(*edge, color='y')
    elif edge in list(I.edges()):
        bilateral_network.add_edge(*edge, color='r')
    elif edge in list(U.edges()):
        bilateral_network.add_edge(*edge, color='#36ba3d')
    elif edge in list(N.edges()):
        bilateral_network.add_edge(*edge, color='#EE7714')
pos = nx.nx_agraph.graphviz_layout(bilateral_network, prog="neato",args="-Goverlap=scale -Elen=5 -Eweight=0.2")
fig = plt.figure(figsize=(10,6))
ax = plt.subplot(1,2,1)
colors = [bilateral_network[u][v]["color"] for u,v in bilateral_network.edges]
nx.draw(bilateral_network, pos, with_labels=True, ax=ax, edge_color=colors)
plt.axis('off')
plt.title('Bilaterally Identified RBP-Target Relationships in Xenograft Retinoblastoma')
plt.tight_layout()
plt.show()

edge_colors = nx.get_edge_attributes(bilateral_network, 'color')
edge_colors_df = pd.DataFrame(columns=['(RBP, Target)', 'RNA Type'])
RNA_types = {"y" : "Multiple Type", "r" : "Intronic", "#36ba3d" : "Untranslated Regions", "#EE7714" : "Non-Coding RNA"}
for x in edge_colors:
    for y in RNA_types:
        if (edge_colors[x] == y):
            edge_colors_df = edge_colors_df.append({'(RBP, Target)' : x, 'RNA Type': RNA_types[y]}, ignore_index=True)
display(edge_colors_df)
display(edge_colors_df.groupby(edge_colors_df['RNA Type'].tolist(),as_index=False).size())

"""# Unilaterally Identified Abnormally Regulated Species Results and Analysis"""

key_pathways = []
for gene_set in GSEA_datasets:
    combined_GEO = pd.read_csv('overall_gene_enrichment/combined/'+gene_set+'/xenograft_gene_enrichment.txt', sep='\t')
    combined_GEO = combined_GEO[combined_GEO['Adjusted P-value'] < 0.05]
    for target in list(set(total_targets) - set(abnormal_regulated_targets)):
        target_pathways = combined_GEO[combined_GEO['Genes'].str.contains(target)]
        pathways = target_pathways['Term'].tolist()
        for pathway in pathways:
            key_pathways.append([target, pathway])
key_pathways.sort()
key_pathways_df = pd.DataFrame(key_pathways, columns=['Target', 'Cellular Pathway'])
key_pathways_df

unilateral_RBP_network_temp = nx.DiGraph()
unilateral_RBP_network = nx.DiGraph()
for RBP in abnormal_regulated_RBPs:
    for target in list(set(total_targets) - set(abnormal_regulated_targets)):
        for edge in list(C.out_edges(RBP)):
            if target == edge[1]:
                unilateral_RBP_network_temp.add_edge(RBP, target)
for edge in list(unilateral_RBP_network_temp.edges()):
    if edge in list(S.edges()):
        unilateral_RBP_network.add_edge(*edge, color='y')
    elif edge in list(I.edges()):
        unilateral_RBP_network.add_edge(*edge, color='r')
    elif edge in list(U.edges()):
        unilateral_RBP_network.add_edge(*edge, color='#36ba3d')
    elif edge in list(N.edges()):
        unilateral_RBP_network.add_edge(*edge, color='#EE7714')
for edge in list(bilateral_network.edges()):
    if (unilateral_RBP_network.has_edge(edge[0], edge[1]) == True):
        unilateral_RBP_network.remove_edge(edge[0], edge[1])
for edge in list(unilateral_RBP_network.edges()):
    if (edge[1] not in list(key_pathways_df['Target'])):
        unilateral_RBP_network.remove_edge(edge[0], edge[1])
unilateral_RBP_network.remove_nodes_from(list(nx.isolates(unilateral_RBP_network)))
pos = nx.nx_agraph.graphviz_layout(unilateral_RBP_network, prog="neato",args="-Goverlap=scale -Elen=5 -Eweight=0.2")
fig = plt.figure(figsize=(15,6))
ax = plt.subplot(1,2,1)
colors = [unilateral_RBP_network[u][v]["color"] for u,v in unilateral_RBP_network.edges]
nx.draw(unilateral_RBP_network, pos, with_labels=True, ax=ax, edge_color=colors)
plt.axis('off')
plt.title('Unilaterally (Identified RBPs) Predicted RBP-Target Relationships in Xenograft Retinoblastoma')
plt.tight_layout()
plt.show()

edge_colors = nx.get_edge_attributes(unilateral_RBP_network, 'color')
edge_colors_df = pd.DataFrame(columns=['(RBP, Target)', 'RNA Type'])
RNA_types = {"y" : "Multiple Type", "r" : "Intronic", "#36ba3d" : "Untranslated Regions", "#EE7714" : "Non-Coding RNA"}
for x in edge_colors:
    for y in RNA_types:
        if (edge_colors[x] == y):
            edge_colors_df = edge_colors_df.append({'(RBP, Target)' : x, 'RNA Type': RNA_types[y]}, ignore_index=True)
display(edge_colors_df)
display(edge_colors_df.groupby(edge_colors_df['RNA Type'].tolist(),as_index=False).size())

key_pathways = []
for gene_set in GSEA_datasets:
    combined_GEO = pd.read_csv('overall_gene_enrichment/combined/'+gene_set+'/xenograft_gene_enrichment.txt', sep='\t')
    combined_GEO = combined_GEO[combined_GEO['Adjusted P-value'] < 0.05]
    for RBP in list(total_RBPs - set(abnormal_regulated_RBPs)):
        RBP_pathways = combined_GEO[combined_GEO['Genes'].str.contains(RBP)]
        pathways = RBP_pathways['Term'].tolist()
        for pathway in pathways:
            key_pathways.append([RBP, pathway])
key_pathways.sort()
key_pathways_df = pd.DataFrame(key_pathways, columns=['RBP', 'Cellular Pathway'])
key_pathways_df

unilateral_target_network_temp = nx.DiGraph()
unilateral_target_network = nx.DiGraph()
for target in abnormal_regulated_targets:
    for RBP in list(set(total_RBPs) - set(abnormal_regulated_RBPs)):
        for edge in list(C.in_edges(target)):
            if RBP == edge[0]:
                unilateral_target_network_temp.add_edge(RBP, target)
for edge in list(unilateral_target_network_temp.edges()):
    if edge in list(S.edges()):
        unilateral_target_network.add_edge(*edge, color='y')
    elif edge in list(I.edges()):
        unilateral_target_network.add_edge(*edge, color='r')
    elif edge in list(U.edges()):
        unilateral_target_network.add_edge(*edge, color='#36ba3d')
    elif edge in list(N.edges()):
        unilateral_target_network.add_edge(*edge, color='#EE7714')
for edge in list(bilateral_network.edges()):
    if (unilateral_target_network.has_edge(edge[0], edge[1]) == True):
        unilateral_target_network.remove_edge(edge[0], edge[1])
for edge in list(unilateral_target_network.edges()):
    if (edge[0] not in list(key_pathways_df['RBP'])):
        unilateral_target_network.remove_edge(edge[0], edge[1])
unilateral_target_network.remove_nodes_from(list(nx.isolates(unilateral_target_network)))
pos = nx.nx_agraph.graphviz_layout(unilateral_target_network, prog="neato",args="-Goverlap=scale -Elen=5 -Eweight=0.2")
fig = plt.figure(figsize=(15,6))
ax = plt.subplot(1,2,1)
colors = [unilateral_target_network[u][v]["color"] for u,v in unilateral_target_network.edges]
nx.draw(unilateral_target_network, pos, with_labels=True, ax=ax, edge_color=colors)
plt.axis('off')
plt.title('Unilaterally (Identified Targets) Predicted RBP-Target Relationships in Xenograft Retinoblastoma')
plt.tight_layout()
plt.show()

edge_colors = nx.get_edge_attributes(unilateral_target_network, 'color')
edge_colors_df = pd.DataFrame(columns=['(RBP, Target)', 'RNA Type'])
RNA_types = {"y" : "Multiple Type", "r" : "Intronic", "#36ba3d" : "Untranslated Regions", "#EE7714" : "Non-Coding RNA"}
for x in edge_colors:
    for y in RNA_types:
        if (edge_colors[x] == y):
            edge_colors_df = edge_colors_df.append({'(RBP, Target)' : x, 'RNA Type': RNA_types[y]}, ignore_index=True)
display(edge_colors_df)
display(edge_colors_df.groupby(edge_colors_df['RNA Type'].tolist(),as_index=False).size())